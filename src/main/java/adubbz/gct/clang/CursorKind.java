/**
 * Copyright 2023 Adubbz
 * Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted,
 * provided that the above copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
package adubbz.gct.clang;

import adubbz.gct.clang.error.ParseErrorCode;
import adubbz.gct.clang.internal.LibClang;

import java.util.EnumSet;
import java.util.HashMap;

public enum CursorKind
{
    UNEXPOSED_DECL(1),
    STRUCT_DECL(2),
    UNION_DECL(3),
    CLASS_DECL(4),
    ENUM_DECL(5),
    FIELD_DECL(6),
    ENUM_CONSTANT_DECL(7),
    FUNCTION_DECL(8),
    VAR_DECL(9),
    PARM_DECL(10),
    OBJ_C_INTERFACE_DECL(11),
    OBJ_C_CATEGORY_DECL(12),
    OBJ_C_PROTOCOL_DECL(13),
    OBJ_C_PROPERTY_DECL(14),
    OBJ_C_IVAR_DECL(15),
    OBJ_C_INSTANCE_METHOD_DECL(16),
    OBJ_C_CLASS_METHOD_DECL(17),
    OBJ_C_IMPLEMENTATION_DECL(18),
    OBJ_C_CATEGORY_IMPL_DECL(19),
    TYPEDEF_DECL(20),
    C_X_X_METHOD(21),
    NAMESPACE(22),
    LINKAGE_SPEC(23),
    CONSTRUCTOR(24),
    DESTRUCTOR(25),
    CONVERSION_FUNCTION(26),
    TEMPLATE_TYPE_PARAMETER(27),
    NON_TYPE_TEMPLATE_PARAMETER(28),
    TEMPLATE_TEMPLATE_PARAMETER(29),
    FUNCTION_TEMPLATE(30),
    CLASS_TEMPLATE(31),
    CLASS_TEMPLATE_PARTIAL_SPECIALIZATION(32),
    NAMESPACE_ALIAS(33),
    USING_DIRECTIVE(34),
    USING_DECLARATION(35),
    TYPE_ALIAS_DECL(36),
    OBJ_C_SYNTHESIZE_DECL(37),
    OBJ_C_DYNAMIC_DECL(38),
    C_X_X_ACCESS_SPECIFIER(39),
    FIRST_REF(40),
    OBJ_C_SUPER_CLASS_REF(40),
    OBJ_C_PROTOCOL_REF(41),
    OBJ_C_CLASS_REF(42),
    TYPE_REF(43),
    C_X_X_BASE_SPECIFIER(44),
    TEMPLATE_REF(45),
    NAMESPACE_REF(46),
    MEMBER_REF(47),
    LABEL_REF(48),
    OVERLOADED_DECL_REF(49),
    VARIABLE_REF(50),
    FIRST_INVALID(70),
    INVALID_FILE(70),
    NO_DECL_FOUND(71),
    NOT_IMPLEMENTED(72),
    INVALID_CODE(73),
    FIRST_EXPR(100),
    UNEXPOSED_EXPR(100),
    DECL_REF_EXPR(101),
    MEMBER_REF_EXPR(102),
    CALL_EXPR(103),
    OBJ_C_MESSAGE_EXPR(104),
    BLOCK_EXPR(105),
    INTEGER_LITERAL(106),
    FLOATING_LITERAL(107),
    IMAGINARY_LITERAL(108),
    STRING_LITERAL(109),
    CHARACTER_LITERAL(110),
    PAREN_EXPR(111),
    UNARY_OPERATOR(112),
    ARRAY_SUBSCRIPT_EXPR(113),
    BINARY_OPERATOR(114),
    COMPOUND_ASSIGN_OPERATOR(115),
    CONDITIONAL_OPERATOR(116),
    C_STYLE_CAST_EXPR(117),
    COMPOUND_LITERAL_EXPR(118),
    INIT_LIST_EXPR(119),
    ADDR_LABEL_EXPR(120),
    STMT_EXPR(121),
    GENERIC_SELECTION_EXPR(122),
    G_N_U_NULL_EXPR(123),
    C_X_X_STATIC_CAST_EXPR(124),
    C_X_X_DYNAMIC_CAST_EXPR(125),
    C_X_X_REINTERPRET_CAST_EXPR(126),
    C_X_X_CONST_CAST_EXPR(127),
    C_X_X_FUNCTIONAL_CAST_EXPR(128),
    C_X_X_TYPEID_EXPR(129),
    C_X_X_BOOL_LITERAL_EXPR(130),
    C_X_X_NULL_PTR_LITERAL_EXPR(131),
    C_X_X_THIS_EXPR(132),
    C_X_X_THROW_EXPR(133),
    C_X_X_NEW_EXPR(134),
    C_X_X_DELETE_EXPR(135),
    UNARY_EXPR(136),
    OBJ_C_STRING_LITERAL(137),
    OBJ_C_ENCODE_EXPR(138),
    OBJ_C_SELECTOR_EXPR(139),
    OBJ_C_PROTOCOL_EXPR(140),
    OBJ_C_BRIDGED_CAST_EXPR(141),
    PACK_EXPANSION_EXPR(142),
    SIZE_OF_PACK_EXPR(143),
    LAMBDA_EXPR(144),
    OBJ_C_BOOL_LITERAL_EXPR(145),
    OBJ_C_SELF_EXPR(146),
    O_M_P_ARRAY_SECTION_EXPR(147),
    OBJ_C_AVAILABILITY_CHECK_EXPR(148),
    FIXED_POINT_LITERAL(149),
    O_M_P_ARRAY_SHAPING_EXPR(150),
    O_M_P_ITERATOR_EXPR(151),
    C_X_X_ADDRSPACE_CAST_EXPR(152),
    CONCEPT_SPECIALIZATION_EXPR(153),
    REQUIRES_EXPR(154),
    C_X_X_PAREN_LIST_INIT_EXPR(155),
    FIRST_STMT(200),
    UNEXPOSED_STMT(200),
    LABEL_STMT(201),
    COMPOUND_STMT(202),
    CASE_STMT(203),
    DEFAULT_STMT(204),
    IF_STMT(205),
    SWITCH_STMT(206),
    WHILE_STMT(207),
    DO_STMT(208),
    FOR_STMT(209),
    GOTO_STMT(210),
    INDIRECT_GOTO_STMT(211),
    CONTINUE_STMT(212),
    BREAK_STMT(213),
    RETURN_STMT(214),
    G_C_C_ASM_STMT(215),
    OBJ_C_AT_TRY_STMT(216),
    OBJ_C_AT_CATCH_STMT(217),
    OBJ_C_AT_FINALLY_STMT(218),
    OBJ_C_AT_THROW_STMT(219),
    OBJ_C_AT_SYNCHRONIZED_STMT(220),
    OBJ_C_AUTORELEASE_POOL_STMT(221),
    OBJ_C_FOR_COLLECTION_STMT(222),
    C_X_X_CATCH_STMT(223),
    C_X_X_TRY_STMT(224),
    C_X_X_FOR_RANGE_STMT(225),
    S_E_H_TRY_STMT(226),
    S_E_H_EXCEPT_STMT(227),
    S_E_H_FINALLY_STMT(228),
    M_S_ASM_STMT(229),
    NULL_STMT(230),
    DECL_STMT(231),
    O_M_P_PARALLEL_DIRECTIVE(232),
    O_M_P_SIMD_DIRECTIVE(233),
    O_M_P_FOR_DIRECTIVE(234),
    O_M_P_SECTIONS_DIRECTIVE(235),
    O_M_P_SECTION_DIRECTIVE(236),
    O_M_P_SINGLE_DIRECTIVE(237),
    O_M_P_PARALLEL_FOR_DIRECTIVE(238),
    O_M_P_PARALLEL_SECTIONS_DIRECTIVE(239),
    O_M_P_TASK_DIRECTIVE(240),
    O_M_P_MASTER_DIRECTIVE(241),
    O_M_P_CRITICAL_DIRECTIVE(242),
    O_M_P_TASKYIELD_DIRECTIVE(243),
    O_M_P_BARRIER_DIRECTIVE(244),
    O_M_P_TASKWAIT_DIRECTIVE(245),
    O_M_P_FLUSH_DIRECTIVE(246),
    S_E_H_LEAVE_STMT(247),
    O_M_P_ORDERED_DIRECTIVE(248),
    O_M_P_ATOMIC_DIRECTIVE(249),
    O_M_P_FOR_SIMD_DIRECTIVE(250),
    O_M_P_PARALLEL_FOR_SIMD_DIRECTIVE(251),
    O_M_P_TARGET_DIRECTIVE(252),
    O_M_P_TEAMS_DIRECTIVE(253),
    O_M_P_TASKGROUP_DIRECTIVE(254),
    O_M_P_CANCELLATION_POINT_DIRECTIVE(255),
    O_M_P_CANCEL_DIRECTIVE(256),
    O_M_P_TARGET_DATA_DIRECTIVE(257),
    O_M_P_TASK_LOOP_DIRECTIVE(258),
    O_M_P_TASK_LOOP_SIMD_DIRECTIVE(259),
    O_M_P_DISTRIBUTE_DIRECTIVE(260),
    O_M_P_TARGET_ENTER_DATA_DIRECTIVE(261),
    O_M_P_TARGET_EXIT_DATA_DIRECTIVE(262),
    O_M_P_TARGET_PARALLEL_DIRECTIVE(263),
    O_M_P_TARGET_PARALLEL_FOR_DIRECTIVE(264),
    O_M_P_TARGET_UPDATE_DIRECTIVE(265),
    O_M_P_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE(266),
    O_M_P_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE(267),
    O_M_P_DISTRIBUTE_SIMD_DIRECTIVE(268),
    O_M_P_TARGET_PARALLEL_FOR_SIMD_DIRECTIVE(269),
    O_M_P_TARGET_SIMD_DIRECTIVE(270),
    O_M_P_TEAMS_DISTRIBUTE_DIRECTIVE(271),
    O_M_P_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE(272),
    O_M_P_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE(273),
    O_M_P_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE(274),
    O_M_P_TARGET_TEAMS_DIRECTIVE(275),
    O_M_P_TARGET_TEAMS_DISTRIBUTE_DIRECTIVE(276),
    O_M_P_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_DIRECTIVE(277),
    O_M_P_TARGET_TEAMS_DISTRIBUTE_PARALLEL_FOR_SIMD_DIRECTIVE(278),
    O_M_P_TARGET_TEAMS_DISTRIBUTE_SIMD_DIRECTIVE(279),
    BUILTIN_BIT_CAST_EXPR(280),
    O_M_P_MASTER_TASK_LOOP_DIRECTIVE(281),
    O_M_P_PARALLEL_MASTER_TASK_LOOP_DIRECTIVE(282),
    O_M_P_MASTER_TASK_LOOP_SIMD_DIRECTIVE(283),
    O_M_P_PARALLEL_MASTER_TASK_LOOP_SIMD_DIRECTIVE(284),
    O_M_P_PARALLEL_MASTER_DIRECTIVE(285),
    O_M_P_DEPOBJ_DIRECTIVE(286),
    O_M_P_SCAN_DIRECTIVE(287),
    O_M_P_TILE_DIRECTIVE(288),
    O_M_P_CANONICAL_LOOP(289),
    O_M_P_INTEROP_DIRECTIVE(290),
    O_M_P_DISPATCH_DIRECTIVE(291),
    O_M_P_MASKED_DIRECTIVE(292),
    O_M_P_UNROLL_DIRECTIVE(293),
    O_M_P_META_DIRECTIVE(294),
    O_M_P_GENERIC_LOOP_DIRECTIVE(295),
    O_M_P_TEAMS_GENERIC_LOOP_DIRECTIVE(296),
    O_M_P_TARGET_TEAMS_GENERIC_LOOP_DIRECTIVE(297),
    O_M_P_PARALLEL_GENERIC_LOOP_DIRECTIVE(298),
    O_M_P_TARGET_PARALLEL_GENERIC_LOOP_DIRECTIVE(299),
    O_M_P_PARALLEL_MASKED_DIRECTIVE(300),
    O_M_P_MASKED_TASK_LOOP_DIRECTIVE(301),
    O_M_P_MASKED_TASK_LOOP_SIMD_DIRECTIVE(302),
    O_M_P_PARALLEL_MASKED_TASK_LOOP_DIRECTIVE(303),
    O_M_P_PARALLEL_MASKED_TASK_LOOP_SIMD_DIRECTIVE(304),
    O_M_P_ERROR_DIRECTIVE(305),
    TRANSLATION_UNIT(350),
    FIRST_ATTR(400),
    UNEXPOSED_ATTR(400),
    I_B_ACTION_ATTR(401),
    I_B_OUTLET_ATTR(402),
    I_B_OUTLET_COLLECTION_ATTR(403),
    C_X_X_FINAL_ATTR(404),
    C_X_X_OVERRIDE_ATTR(405),
    ANNOTATE_ATTR(406),
    ASM_LABEL_ATTR(407),
    PACKED_ATTR(408),
    PURE_ATTR(409),
    CONST_ATTR(410),
    NO_DUPLICATE_ATTR(411),
    C_U_D_A_CONSTANT_ATTR(412),
    C_U_D_A_DEVICE_ATTR(413),
    C_U_D_A_GLOBAL_ATTR(414),
    C_U_D_A_HOST_ATTR(415),
    C_U_D_A_SHARED_ATTR(416),
    VISIBILITY_ATTR(417),
    D_L_L_EXPORT(418),
    D_L_L_IMPORT(419),
    N_S_RETURNS_RETAINED(420),
    N_S_RETURNS_NOT_RETAINED(421),
    N_S_RETURNS_AUTORELEASED(422),
    N_S_CONSUMES_SELF(423),
    N_S_CONSUMED(424),
    OBJ_C_EXCEPTION(425),
    OBJ_C_N_S_OBJECT(426),
    OBJ_C_INDEPENDENT_CLASS(427),
    OBJ_C_PRECISE_LIFETIME(428),
    OBJ_C_RETURNS_INNER_POINTER(429),
    OBJ_C_REQUIRES_SUPER(430),
    OBJ_C_ROOT_CLASS(431),
    OBJ_C_SUBCLASSING_RESTRICTED(432),
    OBJ_C_EXPLICIT_PROTOCOL_IMPL(433),
    OBJ_C_DESIGNATED_INITIALIZER(434),
    OBJ_C_RUNTIME_VISIBLE(435),
    OBJ_C_BOXABLE(436),
    FLAG_ENUM(437),
    CONVERGENT_ATTR(438),
    WARN_UNUSED_ATTR(439),
    WARN_UNUSED_RESULT_ATTR(440),
    ALIGNED_ATTR(441),
    PREPROCESSING_DIRECTIVE(500),
    MACRO_DEFINITION(501),
    MACRO_EXPANSION(502),
    INCLUSION_DIRECTIVE(503),
    MODULE_IMPORT_DECL(600),
    TYPE_ALIAS_TEMPLATE_DECL(601),
    STATIC_ASSERT(602),
    FRIEND_DECL(603),
    CONCEPT_DECL(604),
    OVERLOAD_CANDIDATE(700);

    private static HashMap<Integer, CursorKind> byValue = new HashMap<>();

    private final int value;

    CursorKind(int value)
    {
        this.value = value;
    }

    public int getValue()
    {
        return this.value;
    }

    public boolean isDeclaration()
    {
        return LibClang.INSTANCE.clang_isDeclaration(this);
    }

    public static CursorKind fromInteger(int value)
    {
        if (!byValue.containsKey(value))
            throw new RuntimeException("Unknown CursorKind " + value);

        return byValue.get(value);
    }

    static
    {
        EnumSet.allOf(CursorKind.class).forEach(e -> byValue.put(e.value, e));
    }
}
